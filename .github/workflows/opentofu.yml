name: 'OpenTofu'

on:
  pull_request:
    branches:
      - master

permissions:
  contents: read
  pull-requests: write
  id-token: write
  actions: write

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    name: 'Detect Changes'
    runs-on: ubuntu-latest
    outputs:
      terraform_changed: ${{ steps.changes.outputs.terraform }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Check for terraform changes
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          terraform:
            - 'terraform/**'

    - name: Skip terraform steps
      if: steps.changes.outputs.terraform != 'true'
      run: echo "No terraform files changed, skipping terraform operations"


  plan:
    name: 'OpenTofu Plan'
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.terraform_changed == 'true'
    outputs:
      plan_hash: ${{ steps.upload.outputs.plan_hash }}
      plan_key: ${{ steps.upload.outputs.plan_key }}
      terraform_changed: ${{ needs.detect-changes.outputs.terraform_changed }}
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Setup Python
      run: uv python install 3.12

    - name: Setup OpenTofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: ~1.10

    - name: Setup Kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_CONTENT }}" > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Configure AWS CLI for S3 backend
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.LINODE_S3_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.LINODE_S3_SECRET_KEY }}
      run: |
        echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV

    - name: Install s3cmd
      run: uv tool install s3cmd

    - name: OpenTofu Init
      id: init
      run: tofu init
      env:
        LINODE_TOKEN: ${{ secrets.LINODE_TOKEN }}
        GITHUB_APP_ID: ${{ secrets.APP_ID }}
        GITHUB_APP_INSTALLATION_ID: ${{ secrets.APP_INSTALLATION_ID }}
        GITHUB_APP_PEM_FILE: ${{ secrets.APP_PRIVATE_KEY }}

    - name: OpenTofu Validate
      id: validate
      run: tofu validate -no-color
      env:
        LINODE_TOKEN: ${{ secrets.LINODE_TOKEN }}
        GITHUB_APP_ID: ${{ secrets.APP_ID }}
        GITHUB_APP_INSTALLATION_ID: ${{ secrets.APP_INSTALLATION_ID }}
        GITHUB_APP_PEM_FILE: ${{ secrets.APP_PRIVATE_KEY }}

    - name: OpenTofu Plan
      id: plan
      run: tofu plan -no-color -input=false -out=tfplan
      env:
        LINODE_TOKEN: ${{ secrets.LINODE_TOKEN }}
        GITHUB_APP_ID: ${{ secrets.APP_ID }}
        GITHUB_APP_INSTALLATION_ID: ${{ secrets.APP_INSTALLATION_ID }}
        GITHUB_APP_PEM_FILE: ${{ secrets.APP_PRIVATE_KEY }}

    - name: Generate Plan Output
      run: tofu show -no-color tfplan > plan-raw.txt

    - name: Process Plan Output
      run: sed -E 's/^(\s+)(\+|\-|\~)/\2\1/' plan-raw.txt > plan-output.txt

    - name: Generate Plan Checksum
      id: checksum
      run: |
        PLAN_HASH=$(sha256sum tfplan | cut -d' ' -f1)
        PLAN_KEY="plans/${GITHUB_SHA}-${GITHUB_RUN_ID}"
        echo "plan_hash=$PLAN_HASH" >> $GITHUB_OUTPUT
        echo "plan_key=$PLAN_KEY" >> $GITHUB_OUTPUT
        echo "Plan hash: $PLAN_HASH"
        echo "Plan key: $PLAN_KEY"

    - name: Upload Plan to Storage
      id: upload
      run: |
        PLAN_KEY="${{ steps.checksum.outputs.plan_key }}"
        echo "üì§ Uploading plan to Object Storage..."
        
        if s3cmd put tfplan s3://andyleap-dev-tf/$PLAN_KEY/tfplan --host=us-east-1.linodeobjects.com --host-bucket=us-east-1.linodeobjects.com; then
          echo "‚úÖ Plan uploaded successfully"
        else
          echo "‚ùå Failed to upload plan to Object Storage"
          exit 1
        fi
        
        # Pass through outputs
        echo "plan_hash=${{ steps.checksum.outputs.plan_hash }}" >> $GITHUB_OUTPUT
        echo "plan_key=${{ steps.checksum.outputs.plan_key }}" >> $GITHUB_OUTPUT
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.LINODE_S3_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.LINODE_S3_SECRET_KEY }}

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: always() && github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const terraformChanged = '${{ needs.detect-changes.outputs.terraform_changed }}' === 'true';
          
          if (!terraformChanged) {
            const output = `#### OpenTofu Status ‚ÑπÔ∏è
            No terraform files were changed in this PR.
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
            return;
          }
          
          let planOutput = 'Plan output not available';
          
          try {
            if (fs.existsSync('./terraform/plan-output.txt')) {
              planOutput = fs.readFileSync('./terraform/plan-output.txt', 'utf8');
            }
          } catch (error) {
            planOutput = `Error reading plan output: ${error.message}`;
          }
          
          const output = `#### OpenTofu Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### OpenTofu Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### OpenTofu Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`diff\n
          ${planOutput}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  apply:
    name: 'OpenTofu Apply'
    runs-on: ubuntu-latest
    environment: terraform
    needs: [detect-changes, plan]
    if: needs.plan.result == 'success' && needs.detect-changes.outputs.terraform_changed == 'true'

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Setup Python
      run: uv python install 3.12

    - name: Setup OpenTofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: ~1.10

    - name: Setup Kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_CONTENT }}" > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Configure AWS CLI for S3 backend
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.LINODE_S3_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.LINODE_S3_SECRET_KEY }}
      run: |
        echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV

    - name: Install s3cmd
      run: uv tool install s3cmd

    - name: OpenTofu Init
      run: tofu init
      env:
        GITHUB_APP_ID: ${{ secrets.APP_ID }}
        GITHUB_APP_INSTALLATION_ID: ${{ secrets.APP_INSTALLATION_ID }}
        GITHUB_APP_PEM_FILE: ${{ secrets.APP_PRIVATE_KEY }}

    - name: Download Plan from Storage
      run: |
        PLAN_KEY="${{ needs.plan.outputs.plan_key }}"
        echo "üì• Downloading plan from Object Storage..."
        echo "Plan key: $PLAN_KEY"
        s3cmd get s3://andyleap-dev-tf/$PLAN_KEY/tfplan tfplan --host=us-east-1.linodeobjects.com --host-bucket=us-east-1.linodeobjects.com
        echo "‚úÖ Plan downloaded successfully"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.LINODE_S3_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.LINODE_S3_SECRET_KEY }}
        
    - name: Verify Plan Checksum
      run: |
        DOWNLOADED_HASH=$(sha256sum tfplan | cut -d' ' -f1)
        EXPECTED_HASH="${{ needs.plan.outputs.plan_hash }}"
        
        echo "Expected hash: $EXPECTED_HASH"
        echo "Downloaded hash: $DOWNLOADED_HASH"
        
        if [ "$DOWNLOADED_HASH" != "$EXPECTED_HASH" ]; then
          echo "‚ùå Plan checksum mismatch!"
          exit 1
        fi
        
        echo "‚úÖ Plan checksum verified"

    - name: OpenTofu Apply
      run: tofu apply -auto-approve -input=false tfplan
      env:
        LINODE_TOKEN: ${{ secrets.LINODE_TOKEN }}
        GITHUB_APP_ID: ${{ secrets.APP_ID }}
        GITHUB_APP_INSTALLATION_ID: ${{ secrets.APP_INSTALLATION_ID }}
        GITHUB_APP_PEM_FILE: ${{ secrets.APP_PRIVATE_KEY }}

  complete:
    name: 'OpenTofu Complete'
    runs-on: ubuntu-latest
    needs: [detect-changes, plan, apply]
    if: always()
    
    steps:
    - name: Check results
      run: |
        if [[ "${{ needs.plan.result }}" == "failure" ]]; then
          echo "‚ùå Plan failed"
          exit 1
        fi
        
        if [[ "${{ needs.detect-changes.outputs.terraform_changed }}" != "true" ]]; then
          echo "‚úÖ No terraform changes detected - workflow completed successfully"
          exit 0
        fi
        
        if [[ "${{ needs.apply.result }}" == "failure" ]]; then
          echo "‚ùå Apply failed"
          exit 1
        fi
        
        if [[ "${{ needs.apply.result }}" == "skipped" ]]; then
          echo "‚ùì Apply was skipped - this shouldn't happen"
          exit 1
        fi
        
        echo "‚úÖ OpenTofu workflow completed successfully"